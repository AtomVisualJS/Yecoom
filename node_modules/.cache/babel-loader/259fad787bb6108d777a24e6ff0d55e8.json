{"ast":null,"code":"var _jsxFileName = \"/Users/atomjs/Desktop/APPP/App/src/Utils/posts/SinglePostPage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport GetAllProducts from \"../../api/products\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SinglePostPage = _ref => {\n  _s();\n\n  let {\n    match\n  } = _ref;\n  const {\n    postId\n  } = match.params;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(GetAllProducts());\n  }, [dispatch]);\n  const post = useSelector(state => state.posts.posts.find(post => post._id === postId));\n  console.log(post.titre);\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Post not found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), \"v\", /*#__PURE__*/_jsxDEV(\"article\", {\n      className: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: post.titre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"post-content\",\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SinglePostPage, \"pv4aXZMUULYwdu+dr2O0pH+909w=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = SinglePostPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePostPage\");","map":{"version":3,"sources":["/Users/atomjs/Desktop/APPP/App/src/Utils/posts/SinglePostPage.js"],"names":["React","useDispatch","useEffect","GetAllProducts","useSelector","SinglePostPage","match","postId","params","dispatch","post","state","posts","find","_id","console","log","titre","content"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,OAAO,MAAMC,cAAc,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAaD,KAAK,CAACE,MAAzB;AACA,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ,CAACN,cAAc,EAAf,CAAR;AACD,GAFQ,EAEN,CAACM,QAAD,CAFM,CAAT;AAIA,QAAMC,IAAI,GAAGN,WAAW,CAAEO,KAAD,IACvBA,KAAK,CAACC,KAAN,CAAYA,KAAZ,CAAkBC,IAAlB,CAAwBH,IAAD,IAAUA,IAAI,CAACI,GAAL,KAAaP,MAA9C,CADsB,CAAxB;AAEEQ,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,KAAjB;;AAGF,MAAI,CAACP,IAAL,EAAW;AACT,wBACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA,YADF,oBAEE;AAAS,MAAA,SAAS,EAAC,MAAnB;AAAA,8BACE;AAAA,kBAAKA,IAAI,CAACO;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,QAAA,SAAS,EAAC,cAAb;AAAA,kBAA6BP,IAAI,CAACQ;AAAlC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA9BM;;GAAMb,c;UAEMJ,W,EAMJG,W;;;KARFC,c","sourcesContent":["import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport GetAllProducts from \"../../api/products\";\nimport { useSelector } from \"react-redux\";\n\nexport const SinglePostPage = ({ match }) => {\n  const { postId } = match.params;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(GetAllProducts());\n  }, [dispatch]);\n\n  const post = useSelector((state) =>\n    state.posts.posts.find((post) => post._id === postId)\n  );console.log(post.titre);\n  \n  \n  if (!post) {\n    return (\n      <section>\n        <h2>Post not found!</h2>\n      </section>\n    )\n  }\n\n  return (\n    <section>\n      <br />v\n      <article className=\"post\">\n        <h2>{post.titre}</h2>\n        <p className=\"post-content\">{post.content}</p>\n      </article>\n    </section>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}