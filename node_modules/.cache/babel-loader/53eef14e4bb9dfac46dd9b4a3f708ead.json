{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport GetAllProducts from \"../../api/products\";\nconst PostsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    posts: [],\n    status: \"idle\",\n    error: null\n  },\n\n  reducer(state, action) {\n    state.push(action.payload);\n  },\n\n  extraReducers: {\n    [GetAllProducts.fulfilled]: (state, action) => {\n      state.posts = action.payload;\n    },\n    [GetAllProducts.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [GetAllProducts.rejected]: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport default PostsSlice.reducer;","map":{"version":3,"sources":["/Users/atomjs/Desktop/APPP/App/src/Redux/Slice/PostsSlice.js"],"names":["createSlice","GetAllProducts","PostsSlice","name","initialState","posts","status","error","reducer","state","action","push","payload","extraReducers","fulfilled","pending","loading","rejected"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AAIA,MAAMC,UAAU,GAAGF,WAAW,CAAC;AAC3BG,EAAAA,IAAI,EAAE,OADqB;AAE3BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,MAAM,EAAE,MAFE;AAGVC,IAAAA,KAAK,EAAE;AAHG,GAFa;;AAO3BC,EAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACnBD,IAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,GATwB;;AAU3BC,EAAAA,aAAa,EAAE;AACX,KAACZ,cAAc,CAACa,SAAhB,GAA4B,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACE,OAArB;AACH,KAHU;AAIX,KAACX,cAAc,CAACc,OAAhB,GAA0B,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACO,OAAN,GAAgB,IAAhB;AACH,KANU;AAOX,KAACf,cAAc,CAACgB,QAAhB,GAA2B,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,MAAAA,KAAK,CAACF,KAAN,GAAcG,MAAM,CAACE,OAArB;AACH;AATU;AAVY,CAAD,CAA9B;AA2BA,eAAeV,UAAU,CAACM,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\nimport GetAllProducts from \"../../api/products\"\n\n\n\nconst PostsSlice = createSlice({\n    name: \"posts\",\n    initialState: {\n        posts: [],\n        status: \"idle\",\n        error: null,\n    },\n    reducer(state, action) {\n        state.push(action.payload)\n      },\n    extraReducers: {\n        [GetAllProducts.fulfilled]: (state, action) => {\n            state.posts = action.payload\n        },\n        [GetAllProducts.pending]: (state, action) => {\n            state.loading = true\n        },\n        [GetAllProducts.rejected]: (state, action) => {\n            state.error = action.payload\n        },\n      \n\n },\n   \n})\n\n\nexport default PostsSlice.reducer"]},"metadata":{},"sourceType":"module"}